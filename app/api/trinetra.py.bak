from bson.json_util import dumps
from starlette.responses import Response
from datetime import datetime
from fastapi import APIRouter, File, UploadFile, Request, Depends
from typing import Dict, Any
from app.deps import get_qc_repo, get_db

router = APIRouter()

def _tenant_from(request: Request) -> str:
    host = request.headers.get("Host", "default")
    return host.split(".")[0] if host else "default"

@router.post("/trinetra/qc/upload")
async def qc_upload(
    request: Request,
    image: UploadFile = File(...),
    repo = Depends(get_qc_repo),  # repo handles in-memory vs mongo
):
    tenant = _tenant_from(request)
    content = await image.read()
    doc: Dict[str, Any] = {
        "tenant": tenant,
        "filename": image.filename,
        "size": len(content),
        "mime": image.content_type,
        "qc": {"ok": True, "reason": "dummy-pass"},
        "ts": datetime.utcnow().isoformat() + "Z",
    }
    repo.store(tenant, doc)
    return {"stored": True}

@router.get("/trinetra/qc/results")
async def qc_results(
    request: Request,
    repo = Depends(get_qc_repo),
):
    tenant = _tenant_from(request)
    # IMPORTANT: return a raw list as the tests expect
    return Response(dumps(list(repo.list(tenant))), media_type="application/json")






