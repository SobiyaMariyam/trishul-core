from fastapi import APIRouter, Depends, Request
from app.deps import get_db
from bson.json_util import dumps
from starlette.responses import Response
from app.middleware.ratelimit import limiter

router = APIRouter()

@router.get("/kavach/health")
async def kavach_health():
    return {"ok": True}

@router.get("/kavach/profile")
@limiter.limit("5/minute")
async def kavach_profile(request: Request, db = Depends(get_db)):
    tenant = (getattr(getattr(request, "state", None), "tenant", None) or request.headers.get("Host", "default")).split(".")[0]
    doc = db[f"{tenant}_users"].find_one({"role": "owner"}) or {"tenant": tenant, "role": "owner"}
    return Response(dumps(doc), media_type="application/json")
from fastapi import Body
from bson.json_util import dumps
from starlette.responses import Response
from fastapi import Depends, Request
from app.deps import get_db

@router.post("/kavach/scans/seed")
async def kavach_scans_seed(request: Request, db=Depends(get_db), scans: list[dict]=Body(...)):
    tenant = (getattr(getattr(request,"state",None),"tenant",None) or request.headers.get("Host","default")).split(".")[0]
    col = db[f"{tenant}_scans"]
    if isinstance(scans, dict):
        scans = [scans]
    res = col.insert_many(scans)
    return Response(dumps({"inserted": len(res.inserted_ids)}), media_type="application/json")
from datetime import datetime
from fastapi import Request, Depends
from app.deps import get_db

def _tenant_from_req(request: Request) -> str:
    return (getattr(getattr(request, "state", None), "tenant", None) or request.headers.get("Host","default")).split(".")[0]

@router.post("/kavach/report/generate")
async def kavach_report_generate(request: Request, db=Depends(get_db)):
    tenant = _tenant_from_req(request)
    scans = db[f"{tenant}_scans"].count_documents({})
    qc = db[f"{tenant}_qc_results"].count_documents({})
    # last forecast from rudra collection if present
    lastdoc = db[f"{tenant}_rudra_forecasts"].find_one(sort=[("ts",-1)])
    last_forecast = float(lastdoc.get("value", 0.0)) if lastdoc else 0.0

    html = f"""<!doctype html>
<html><head><meta charset="utf-8"><title>Kavach Report - {tenant}</title></head>
<body style="font-family:Arial, sans-serif">
<h2>Kavach Security Report — {tenant}</h2>
<ul>
  <li>Total scans: {scans}</li>
  <li>QC results: {qc}</li>
  <li>Last forecast: {last_forecast}</li>
  <li>Generated at: {datetime.utcnow().isoformat()}Z</li>
</ul>
</body></html>"""

    doc = {"tenant": tenant, "kind":"kavach_report", "html": html, "ts": datetime.utcnow().isoformat()+"Z"}
    res = db[f"{tenant}_kavach_reports"].insert_one(doc)
    return {"ok": True, "report_id": str(res.inserted_id), "last_forecast": last_forecast, "scans": scans, "qc_results": qc}

@router.get("/kavach/report/latest")
async def kavach_report_latest(request: Request, db=Depends(get_db)):
    tenant = _tenant_from_req(request)
    latest = db[f"{tenant}_kavach_reports"].find_one(sort=[("ts",-1)])
    if not latest:
        return {"ok": False, "detail": "no report"}
    # return html inline so you can screenshot proof
    return {"ok": True, "ts": latest.get("ts"), "preview": latest.get("html")}
