from fastapi import APIRouter, Depends, Request
from app.deps import get_db

router = APIRouter()

@router.post("/rudra/cloud/mock-usage")
async def mock_usage(request: Request, payload: dict, db = Depends(get_db)):
    tenant = getattr(getattr(request, "state", object()), "tenant", None)
    if not tenant:
        tenant = request.headers.get("Host", "default").split(".")[0]
    db[f"{tenant}_costs"].insert_one({
        "usage": payload.get("usage", [{"service":"ec2","hours":120,"rate":0.12},{"service":"s3","gb":500,"rate":0.023}]),
        "tenant": tenant,
    })
    return {"usage":[{"service":"ec2","hours":120,"rate":0.12},{"service":"s3","gb":500,"rate":0.023}]}

@router.get("/rudra/cloud/forecast")
async def forecast(request: Request, db = Depends(get_db)):
    tenant = getattr(getattr(request, "state", object()), "tenant", None)
    usage = []  # or however you get usage

    forecast_vals = []
    for item in usage or []:
        if "hours" in item:
            cost = item["hours"] * item.get("rate", 0)
        elif "gb" in item:
            cost = item["gb"] * item.get("rate", 0)
        else:
            cost = 0
        forecast_vals.append(cost)

    if not forecast_vals:
        forecast_vals = [0]

    return {"forecast": forecast_vals}}_rudra_forecasts"].insert_one({"value": float(avg), "series": series, "ts": datetime.utcnow().isoformat()+"Z"})
    return {"saved": True, "avg": float(avg), "series": series}









