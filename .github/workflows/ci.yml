name: CI — Pester tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          
          # Install from CI requirements (minimal set for testing)
          if (Test-Path requirements-ci.txt) {
            Write-Host "Installing from requirements-ci.txt..."
            pip install -r requirements-ci.txt
          } else {
            Write-Host "No requirements-ci.txt found, using minimal packages..."
            pip install uvicorn fastapi pymongo prometheus-fastapi-instrumentator python-jose[cryptography] pydantic-settings python-multipart APScheduler slowapi python-dotenv
          }
          
          Write-Host "Package installation completed"

      # Minimal .env for CI; NO SendGrid key => no emails will be sent
      - name: Create .env
        shell: pwsh
        run: |
          "SECRET_KEY=dev-secret-for-ci`nTENANT_DOMAIN=tenant1.lvh.me`nUSE_INMEMORY_DB=1" | Out-File -Encoding ASCII -NoNewline .env

      - name: Launch API
        shell: pwsh
        run: |
          # Start API using the dedicated script with output capture
          Write-Host "Starting API with error capture..."
          $apiProcess = Start-Process python -ArgumentList 'scripts\start_api_ci.py' -PassThru -RedirectStandardOutput 'api_output.txt' -RedirectStandardError 'api_error.txt' -WindowStyle Hidden
          Write-Host "Started API process: $($apiProcess.Id)"
          
          # Store the process ID for later steps
          $apiProcess.Id | Out-File -FilePath 'api_process_id.txt' -NoNewline
          
          # Give it a moment to start
          Start-Sleep -Seconds 3
          
          # Check if process died and show output
          if (-not (Get-Process -Id $apiProcess.Id -ErrorAction SilentlyContinue)) {
            Write-Host "API process died! Output:"
            if (Test-Path 'api_output.txt') {
              Write-Host "STDOUT:"
              Get-Content 'api_output.txt' | Write-Host
            }
            if (Test-Path 'api_error.txt') {
              Write-Host "STDERR:" 
              Get-Content 'api_error.txt' | Write-Host
            }
            throw "API process died - check output above for errors"
          }
          
          # Wait for startup and test health endpoint
          Write-Host "Process is running, testing health endpoint..."
          $timeout = (Get-Date).AddSeconds(25)
          $attempts = 0
          $response = ""
          do {
            $attempts++
            Write-Host "Attempt $attempts..."
            
            # Check if process died during startup
            if (-not (Get-Process -Id $apiProcess.Id -ErrorAction SilentlyContinue)) {
              Write-Host "Process died during health checks! Output:"
              if (Test-Path 'api_output.txt') { Get-Content 'api_output.txt' | Write-Host }
              if (Test-Path 'api_error.txt') { Get-Content 'api_error.txt' | Write-Host }
              throw "API process died during startup"
            }
            
            try {
              $response = (curl.exe -s -o NUL -w '%{http_code}' 'http://127.0.0.1:8000/health' -H 'Host: tenant1.lvh.me')
              Write-Host "Response: $response"
              if ($response -eq '200') { 
                Write-Host "API is ready!"
                break 
              }
            } catch {
              Write-Host "Request error: $_"
            }
            Start-Sleep -Seconds 2
          } while ((Get-Date) -lt $timeout)
          
          if ($response -ne '200') { 
            Write-Host "Final process check: $(Get-Process -Id $apiProcess.Id -ErrorAction SilentlyContinue)"
            Write-Host "Server output:"
            if (Test-Path 'api_output.txt') { Get-Content 'api_output.txt' | Write-Host }
            if (Test-Path 'api_error.txt') { Get-Content 'api_error.txt' | Write-Host }
            throw 'API failed to start - final response: ' + $response
          }
          
          Write-Host "API started successfully!"

      - name: Install Pester 5
        shell: pwsh
        run: |
          Install-Module Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0.0 -Force

      - name: Pre-test API Check
        shell: pwsh
        run: |
          # Check if API process is still running
          $processId = Get-Content 'api_process_id.txt' -ErrorAction SilentlyContinue
          if ($processId) {
            $process = Get-Process -Id $processId -ErrorAction SilentlyContinue
            if ($process) {
              Write-Host "✅ API process $processId is still running"
              
              # Test health endpoint one more time before tests
              try {
                $response = Invoke-WebRequest -Uri "http://127.0.0.1:8000/health" -Headers @{Host="tenant1.lvh.me"} -UseBasicParsing -TimeoutSec 10
                Write-Host "✅ Health check passed: $($response.StatusCode) - $($response.Content)"
              } catch {
                Write-Host "❌ Health check failed: $_"
                Write-Host "API output:"
                if (Test-Path 'api_output.txt') { Get-Content 'api_output.txt' | Write-Host }
                if (Test-Path 'api_error.txt') { Get-Content 'api_error.txt' | Write-Host }
                throw "API is not responding before tests"
              }
            } else {
              Write-Host "❌ API process died before tests!"
              throw "API process not found"
            }
          } else {
            Write-Host "❌ API process ID not found"
            throw "Process ID file missing"
          }

      - name: Run tests
        shell: pwsh
        env:
          HOST: tenant1.lvh.me
        run: |
          Invoke-Pester .\tests\*.Tests.ps1 -CI

      - name: Cleanup API Process
        if: always()
        shell: pwsh
        run: |
          # Stop the API process
          $processId = Get-Content 'api_process_id.txt' -ErrorAction SilentlyContinue
          if ($processId) {
            Write-Host "Stopping API process $processId"
            Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
          }
          
          # Show final API output for debugging
          Write-Host "=== Final API Output ==="
          if (Test-Path 'api_output.txt') { 
            Write-Host "STDOUT:"
            Get-Content 'api_output.txt' | Write-Host 
          }
          if (Test-Path 'api_error.txt') { 
            Write-Host "STDERR:"
            Get-Content 'api_error.txt' | Write-Host 
          }

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs
          path: |
            api_output.txt
            api_error.txt
            logs/**/*.log
